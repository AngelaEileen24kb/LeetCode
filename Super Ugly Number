Super Ugly Number

Write a program to find the nth super ugly number.

Super ugly numbers are positive numbers whose all prime factors are in the given prime list primes of size k. For example, [1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32] is the sequence of the first 12 super ugly numbers given primes = [2, 7, 13, 19] of size 4.

Note:
(1) 1 is a super ugly number for any given primes.
(2) The given numbers in primes are in ascending order.
(3) 0 < k ≤ 100, 0 < n ≤ 106, 0 < primes[i] < 1000.

Credits:

class Solution {
public:
//Keep k pointers and update them in each iteration. 
//Time complexity is O(kn). Space Complexity: O(k + n)
    int nthSuperUglyNumber(int n, vector<int>& primes) {
        int k = primes.size();
        vector<int> index(k, 0);
        vector<int> ugly(n, INT_MAX);
        ugly[0] = 1;
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < k; ++j) {
                ugly[i] = min(ugly[i], ugly[index[j]] * primes[j]);
            }
            for (int j = 0; j < k; ++j) {
                if (ugly[i] % primes[j] == 0) {
                    index[j]++;
                }
            }
        }
        return ugly[n-1];
    }
};
//The idea is similar with Ugly Number II
/*
int nthUglyNumber(int n) {
    int i2 = 0, i3 = 0, i5 = 0;
    vector<int> ugly(n, INT_MAX);
    ugly[0] = 1;
    for (int i = 1; i < n; ++i) {
        ugly[i] = min(ugly[i2] * 2, min(ugly[i3] * 3, ugly[i5] * 5));
        if (ugly[i] % 2 == 0) i2++;  //if (ugly[i] == ugly[i2] * 2) i2++;
        if (ugly[i] % 3 == 0) i3++;  //if (ugly[i] == ugly[i3] * 3) i3++;
        if (ugly[i] % 5 == 0) i5++;  //if (ugly[i] == ugly[i5] * 5) i5++;
    }
    return ugly[k-1];
}
*/
